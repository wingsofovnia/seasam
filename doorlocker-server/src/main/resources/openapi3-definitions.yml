---
openapi: 3.0.0
info:
  title: Seasam Door Locker API
  version: 0.0.1

paths:
  /things:
    get:
      tags:
      - things
      summary: Gets all Things
      operationId: getAllThings
      responses:
        200:
          description: A list of all Things
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Thing'
        401:
          description: 'Bad Request'
        403:
          description: 'Forbidden'
        500:
          description: 'Internal server error, please contact support'
    post:
      tags:
      - things
      summary: Adds new Thing
      operationId: createThing
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Thing'
      responses:
        201:
          description: Thing created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Thing'
        401:
          description: 'Bad Request'
        403:
          description: 'Forbidden'
        500:
          description: 'Internal server error, please contact support'
  '/things/{thingId}':
    get:
      tags:
      - things
      summary: Finds Thing by ID
      operationId: getOneThing
      parameters:
      - name: thingId
        in: path
        description: ID of Thing to fetch
        required: true
        schema:
          type: string
      responses:
        200:
          description: Thing with given ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Thing'
        401:
          description: 'Bad Request'
        403:
          description: 'Forbidden'
        404:
          description: 'Unable to find Thing by given ID'
        500:
          description: 'Internal server error, please contact support'
    put:
      tags:
      - things
      summary: Updates Thing
      operationId: updateThing
      parameters:
      - name: thingId
        in: path
        required: true
        schema:
          type: object
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Thing'
        required: true
      responses:
        200:
          description: Updated Thing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Thing'
        401:
          description: 'Bad Request'
        403:
          description: 'Forbidden'
        404:
          description: 'Unable to find Thing by given ID'
        500:
          description: 'Internal server error, please contact support'
    delete:
      tags:
      - things
      summary: Deletes Thing
      operationId: deleteThing
      parameters:
      - name: thingId
        in: path
        description: ID of Thing to delete
        required: true
        schema:
          type: string
      responses:
        204:
          description: 'Thing was deleted successfully'
        401:
          description: 'Bad Request'
        403:
          description: 'Forbidden'
        404:
          description: 'Unable to find Thing by given ID'
        500:
          description: 'Internal server error, please contact support'
  /user:
    get:
      tags:
      - users
      summary: Gets all Users
      operationId: getAllUsers
      responses:
        200:
          description: A list of all Users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        401:
          description: 'Bad Request'
        403:
          description: 'Forbidden'
        500:
          description: 'Internal server error, please contact support'
    post:
      tags:
      - users
      summary: Creates User
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        201:
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: 'Bad Request'
        403:
          description: 'Forbidden'
        500:
          description: 'Internal server error, please contact support'
  '/users/{userId}':
    get:
      tags:
      - users
      summary: Gets User by ID
      operationId: getUserById
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: User with given ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: 'Bad Request'
        403:
          description: 'Forbidden'
        404:
          description: 'Unable to find User by given ID'
        500:
          description: 'Internal server error, please contact support'
    put:
      tags:
      - users
      summary: Updates User
      operationId: updateUser
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: object
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          description: Updated User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: 'Bad Request'
        403:
          description: 'Forbidden'
        404:
          description: 'Unable to find User by given ID'
        500:
          description: 'Internal server error, please contact support'
    delete:
      tags:
      - users
      summary: Deletes User
      operationId: deleteUser
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      responses:
        204:
          description: 'User was deleted successfully'
        401:
          description: 'Bad Request'
        403:
          description: 'Forbidden'
        404:
          description: 'Unable to find User by given ID'
        500:
          description: 'Internal server error, please contact support'
  '/users/{userId}/devices':
    get:
      tags:
      - devices
      summary: Gets all User Device
      operationId: getAllUserDevices
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: A list of all User Devices
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Device'
        401:
          description: 'Bad Request'
        403:
          description: 'Forbidden'
        500:
          description: 'Internal server error, please contact support'
    post:
      tags:
      - devices
      summary: Creates User Device
      operationId: createUserDevice
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Device'
        required: true
      responses:
        201:
          description: Device created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Device'
        401:
          description: 'Bad Request'
        403:
          description: 'Forbidden'
        500:
          description: 'Internal server error, please contact support'
  '/users/{userId}/devices/{deviceId}':
    get:
      tags:
      - devices
      summary: Get User Device by Device and User IDs
      operationId: getUserDeviceById
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      - name: deviceId
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Device with given ID of given User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        401:
          description: 'Bad Request'
        403:
          description: 'Forbidden'
        404:
          description: 'Unable to find User Device by given Device ID or User ID'
        500:
          description: 'Internal server error, please contact support'
    put:
      tags:
      - devices
      summary: Update User Device
      operationId: updateUserDevice
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      - name: deviceId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Device'
        required: true
      responses:
        200:
          description: Updated Device
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        401:
          description: 'Bad Request'
        403:
          description: 'Forbidden'
        404:
          description: 'Unable to find User Device by given Device ID or User ID'
        500:
          description: 'Internal server error, please contact support'
    delete:
      tags:
      - devices
      summary: Delete User Device
      operationId: deleteUserDevice
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      - name: deviceId
        in: path
        required: true
        schema:
          type: string
      responses:
        204:
          description: 'Device was deleted successfully'
        401:
          description: 'Bad Request'
        403:
          description: 'Forbidden'
        404:
          description: 'Unable to find User Device by given Device ID or User ID'
        500:
          description: 'Internal server error, please contact support'
  '/users/{userId}/permissions':
    get:
      tags:
      - permissions
      summary: Gets all User Permission
      operationId: getAllUserPermissions
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      - name: thingId
        in: query
        required: false
        description: Filters User Permission by given Thing ID
        schema:
          type: string
      responses:
        200:
          description: A list of all User Permissions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Permission'
        401:
          description: 'Bad Request'
        403:
          description: 'Forbidden'
        500:
          description: 'Internal server error, please contact support'
  '/users/{userId}/permissions/{thingId}':
    post:
      tags:
      - permissions
      summary: Creates User Permission to Thing with given ID
      operationId: createUserPermission
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      - name: thingId
        in: path
        required: true
        schema:
          type: string
      responses:
        201:
          description: Permission created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Permission'
        401:
          description: 'Bad Request'
        403:
          description: 'Forbidden'
        404:
          description: 'Unable to find User or Thing with given IDs'
        500:
          description: 'Internal server error, please contact support'
    delete:
      tags:
      - permissions
      summary: Delete User Permission to Thing with given ID
      operationId: deleteUserPermission
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      - name: thingId
        in: path
        required: true
        schema:
          type: string
      responses:
        204:
          description: 'Permission was deleted successfully'
        401:
          description: 'Bad Request'
        403:
          description: 'Forbidden'
        404:
          description: 'Unable to find User or Thing with given IDs'
        500:
          description: 'Internal server error, please contact support'
  '/accesses':
    get:
      tags:
      - accesses
      summary: Get all Accesses
      operationId: getAllAccesses
      parameters:
      - name: thingId
        in: query
        required: false
        schema:
          type: string
      - name: userId
        in: query
        required: false
        schema:
          type: string
      - name: period
        in: query
        required: false
        description: 'Filters Accesses by given time interval (ISO 8601). Format `start_timestamp,end_timestamp` e.g. `?period=2018-09-24T08:00:00+00:00,2018-09-28T24:00:00+00:00`'
        schema:
          type: string
      responses:
        200:
          description: A list of all Accesses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Access'
        401:
          description: 'Bad Request'
        403:
          description: 'Forbidden'
        500:
          description: 'Internal server error, please contact support'

components:
  schemas:
    UserStatus:
      type: string
      enum:
        - ACTIVE
        - INACTIVE
        - BLOCKED
    UserRole:
      type: string
      enum:
        - USER
        - ADMIN
        - SUPERUSER
    User:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        name:
          type: string
          minLength: 3
        email:
          type: string
          minLength: 3
        password:
          type: string
          minLength: 3
          writeOnly: true
        devices:
          type: array
          items:
            $ref: '#/components/schemas/Device'
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/Permission'
        status:
          $ref: '#/components/schemas/UserStatus'
        role:
          $ref: '#/components/schemas/UserRole'
    Device:
      type: object
      properties:
        name:
          type: string
        key:
          type: string
          description: Base64 encoded Public Key
    Permission:
      type: object
      properties:
        thingId:
          type: object
        grantedBy:
          type: object
        timestamp:
          type: string
          format: datetime
    Access:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        userId:
          type: string
        device:
          $ref: '#/components/schemas/Device'
        permission:
          $ref: '#/components/schemas/Permission'
        timestamp:
          type: string
          format: datetime
    Thing:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        name:
          type: string
